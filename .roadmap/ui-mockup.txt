import React, { useState, useEffect } from 'react';
import {
  Phone, PhoneCall, PhoneOff, Mic, MicOff, Volume2, VolumeX,
  Pause, Play, SkipForward, Users, MessageSquare, Clock,
  User, FileText, Search, Settings, MoreHorizontal, CheckCircle,
  AlertCircle, Coffee, Headphones, Eye, EyeOff, ChevronDown,
  Star, Tag, Calendar, MapPin, Mail, Building, Activity
} from 'lucide-react';

export default function ConnectCCP() {
  const [agentStatus, setAgentStatus] = useState('Available');
  const [callState, setCallState] = useState('idle'); // idle, incoming, active, hold
  const [isMuted, setIsMuted] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [activeTab, setActiveTab] = useState('customer');
  const [contactInfo, setContactInfo] = useState({
    name: 'Sarah Johnson',
    phone: '+1 (555) 123-4567',
    email: 'sarah.johnson@email.com',
    location: 'New York, NY',
    company: 'Tech Solutions Inc.',
    priority: 'High',
    previousCalls: 3,
    lastContact: '2 days ago'
  });

  // Simulate call timer
  useEffect(() => {
    let interval;
    if (callState === 'active') {
      interval = setInterval(() => {
        setCallDuration(prev => prev + 1);
      }, 1000);
    } else {
      setCallDuration(0);
    }
    return () => clearInterval(interval);
  }, [callState]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const statusColors = {
    'Available': 'bg-green-500',
    'Away': 'bg-yellow-500',
    'Break': 'bg-orange-500',
    'Offline': 'bg-gray-500'
  };

  const handleStatusChange = (status) => {
    setAgentStatus(status);
  };

  const handleCall = () => {
    if (callState === 'idle') {
      setCallState('incoming');
      setTimeout(() => setCallState('active'), 2000);
    } else if (callState === 'active') {
      setCallState('idle');
      setCallDuration(0);
    }
  };

  return (
    <div className="h-screen bg-gray-50 flex">
      {/* Left Sidebar - Agent Info & Status */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Agent Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-medium">
                JD
              </div>
              <div className={`absolute -bottom-1 -right-1 w-4 h-4 ${statusColors[agentStatus]} rounded-full border-2 border-white`}></div>
            </div>
            <div>
              <h3 className="font-medium text-gray-900">John Doe</h3>
              <div className="relative">
                <select
                  value={agentStatus}
                  onChange={(e) => handleStatusChange(e.target.value)}
                  className="text-sm text-gray-600 bg-transparent border-none outline-none cursor-pointer"
                >
                  <option value="Available">Available</option>
                  <option value="Away">Away</option>
                  <option value="Break">Break</option>
                  <option value="Offline">Offline</option>
                </select>
                <ChevronDown className="w-4 h-4 text-gray-400 absolute right-0 top-0 pointer-events-none" />
              </div>
            </div>
          </div>
        </div>

        {/* Call Controls Panel */}
        <div className="p-4 border-b border-gray-200">
          <div className="text-center mb-4">
            {callState === 'idle' && (
              <div className="text-gray-500">
                <Phone className="w-8 h-8 mx-auto mb-2" />
                <p className="text-sm">Ready to take calls</p>
              </div>
            )}

            {callState === 'incoming' && (
              <div className="text-blue-600 animate-pulse">
                <PhoneCall className="w-8 h-8 mx-auto mb-2" />
                <p className="text-sm font-medium">Incoming Call</p>
                <p className="text-xs text-gray-600">{contactInfo.phone}</p>
              </div>
            )}

            {callState === 'active' && (
              <div className="text-green-600">
                <div className="flex items-center justify-center space-x-2 mb-2">
                  <Activity className="w-5 h-5" />
                  <span className="font-mono text-lg">{formatTime(callDuration)}</span>
                </div>
                <p className="text-sm">{contactInfo.name}</p>
                <p className="text-xs text-gray-600">{contactInfo.phone}</p>
              </div>
            )}
          </div>

          {/* Call Control Buttons */}
          <div className="grid grid-cols-3 gap-2 mb-4">
            <button
              onClick={() => setIsMuted(!isMuted)}
              className={`p-3 rounded-lg border ${isMuted ? 'bg-red-50 border-red-200 text-red-600' : 'bg-gray-50 border-gray-200 text-gray-600'} hover:bg-gray-100 transition-colors`}
              disabled={callState === 'idle'}
            >
              {isMuted ? <MicOff className="w-5 h-5 mx-auto" /> : <Mic className="w-5 h-5 mx-auto" />}
            </button>

            <button
              onClick={handleCall}
              className={`p-3 rounded-lg border ${
                callState === 'active'
                  ? 'bg-red-500 text-white hover:bg-red-600'
                  : callState === 'incoming'
                  ? 'bg-green-500 text-white hover:bg-green-600'
                  : 'bg-gray-50 border-gray-200 text-gray-400'
              } transition-colors`}
            >
              {callState === 'active' ? <PhoneOff className="w-5 h-5 mx-auto" /> : <Phone className="w-5 h-5 mx-auto" />}
            </button>

            <button
              className="p-3 rounded-lg border bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100 transition-colors"
              disabled={callState === 'idle'}
            >
              <Pause className="w-5 h-5 mx-auto" />
            </button>
          </div>

          {/* Additional Controls */}
          <div className="grid grid-cols-2 gap-2">
            <button
              onClick={() => setIsRecording(!isRecording)}
              className={`p-2 rounded-lg border text-sm ${isRecording ? 'bg-red-50 border-red-200 text-red-600' : 'bg-gray-50 border-gray-200 text-gray-600'} hover:bg-gray-100 transition-colors`}
              disabled={callState === 'idle'}
            >
              {isRecording ? <Eye className="w-4 h-4 inline mr-1" /> : <EyeOff className="w-4 h-4 inline mr-1" />}
              Record
            </button>

            <button className="p-2 rounded-lg border bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100 transition-colors text-sm">
              <SkipForward className="w-4 h-4 inline mr-1" />
              Transfer
            </button>
          </div>
        </div>

        {/* VDI Audio Status */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center space-x-2 text-green-600">
            <Headphones className="w-4 h-4" />
            <span className="text-sm font-medium">VDI Audio Active</span>
            <CheckCircle className="w-4 h-4" />
          </div>
          <p className="text-xs text-gray-500 mt-1">Local audio path optimized</p>
        </div>

        {/* Queue Info */}
        <div className="p-4 border-b border-gray-200">
          <h4 className="font-medium text-gray-900 mb-2">Queue Status</h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-600">In Queue:</span>
              <span className="font-medium">7</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Avg Wait:</span>
              <span className="font-medium">2:30</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Agents Online:</span>
              <span className="font-medium">12</span>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="p-4 flex-1">
          <h4 className="font-medium text-gray-900 mb-3">Quick Actions</h4>
          <div className="space-y-2">
            <button className="w-full p-2 text-left text-sm text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
              <Coffee className="w-4 h-4 inline mr-2" />
              Take Break
            </button>
            <button className="w-full p-2 text-left text-sm text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
              <MessageSquare className="w-4 h-4 inline mr-2" />
              Chat Support
            </button>
            <button className="w-full p-2 text-left text-sm text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
              <Settings className="w-4 h-4 inline mr-2" />
              Settings
            </button>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Top Bar */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-xl font-semibold text-gray-900">Agent Workspace</h1>
              {callState === 'active' && (
                <div className="flex items-center space-x-2 bg-green-50 text-green-700 px-3 py-1 rounded-full text-sm">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  Active Call
                </div>
              )}
            </div>
            <div className="flex items-center space-x-3">
              <button className="p-2 text-gray-400 hover:text-gray-600">
                <Search className="w-5 h-5" />
              </button>
              <button className="p-2 text-gray-400 hover:text-gray-600">
                <Settings className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white border-b border-gray-200">
          <div className="flex space-x-8 px-4">
            {[
              { id: 'customer', label: 'Customer Info', icon: User },
              { id: 'cases', label: 'Cases', icon: FileText },
              { id: 'knowledge', label: 'Knowledge', icon: Search },
              { id: 'tasks', label: 'Tasks', icon: CheckCircle }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 py-4 border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span className="font-medium">{tab.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Content Area */}
        <div className="flex-1 p-6 overflow-auto">
          {activeTab === 'customer' && (
            <div className="max-w-4xl">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-6">
                  <div className="flex items-center space-x-4">
                    <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                      <User className="w-8 h-8 text-blue-600" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">{contactInfo.name}</h2>
                      <div className="flex items-center space-x-4 mt-2">
                        <span className="flex items-center text-gray-600">
                          <Phone className="w-4 h-4 mr-1" />
                          {contactInfo.phone}
                        </span>
                        <span className="flex items-center text-gray-600">
                          <Mail className="w-4 h-4 mr-1" />
                          {contactInfo.email}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      contactInfo.priority === 'High' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {contactInfo.priority} Priority
                    </span>
                    <button className="p-2 text-gray-400 hover:text-gray-600">
                      <MoreHorizontal className="w-5 h-5" />
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium text-gray-900 mb-3">Contact Details</h3>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3">
                          <Building className="w-4 h-4 text-gray-400" />
                          <span className="text-gray-700">{contactInfo.company}</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          <MapPin className="w-4 h-4 text-gray-400" />
                          <span className="text-gray-700">{contactInfo.location}</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          <Calendar className="w-4 h-4 text-gray-400" />
                          <span className="text-gray-700">Last Contact: {contactInfo.lastContact}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium text-gray-900 mb-3">Interaction History</h3>
                      <div className="space-y-3">
                        <div className="bg-gray-50 p-3 rounded-lg">
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-sm font-medium text-gray-900">Previous Calls</span>
                            <span className="text-sm text-gray-600">{contactInfo.previousCalls}</span>
                          </div>
                          <p className="text-xs text-gray-600">Average duration: 8:30</p>
                        </div>
                        <div className="bg-gray-50 p-3 rounded-lg">
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-sm font-medium text-gray-900">Satisfaction Score</span>
                            <div className="flex items-center">
                              {[1,2,3,4,5].map(i => (
                                <Star key={i} className={`w-4 h-4 ${i <= 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} />
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium text-gray-900 mb-3">Recent Notes</h3>
                      <div className="space-y-3">
                        <div className="bg-blue-50 p-3 rounded-lg border-l-4 border-blue-400">
                          <p className="text-sm text-gray-700">Customer interested in premium support package</p>
                          <p className="text-xs text-gray-500 mt-1">2 days ago - Agent Sarah</p>
                        </div>
                        <div className="bg-yellow-50 p-3 rounded-lg border-l-4 border-yellow-400">
                          <p className="text-sm text-gray-700">Follow-up required on billing inquiry</p>
                          <p className="text-xs text-gray-500 mt-1">1 week ago - Agent Mike</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Call Notes */}
              {callState === 'active' && (
                <div className="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                  <h3 className="font-medium text-gray-900 mb-4">Call Notes</h3>
                  <textarea
                    className="w-full h-32 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter call notes here..."
                  />
                  <div className="flex justify-between items-center mt-4">
                    <div className="flex items-center space-x-4">
                      <button className="flex items-center space-x-2 text-sm text-gray-600 hover:text-gray-800">
                        <Tag className="w-4 h-4" />
                        <span>Add Tag</span>
                      </button>
                    </div>
                    <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                      Save Notes
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'cases' && (
            <div className="max-w-4xl">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Customer Cases</h2>
                  <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    Create New Case
                  </button>
                </div>
                <div className="space-y-4">
                  {[
                    { id: 'CASE-001', title: 'Billing inquiry - Premium package', status: 'Open', priority: 'High', date: '2024-03-15' },
                    { id: 'CASE-002', title: 'Technical support - API integration', status: 'In Progress', priority: 'Medium', date: '2024-03-12' },
                    { id: 'CASE-003', title: 'Account access issue', status: 'Resolved', priority: 'Low', date: '2024-03-10' }
                  ].map(case_ => (
                    <div key={case_.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-medium text-gray-900">{case_.title}</h3>
                          <p className="text-sm text-gray-600 mt-1">Case ID: {case_.id}</p>
                        </div>
                        <div className="flex items-center space-x-3">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            case_.status === 'Open' ? 'bg-red-100 text-red-800' :
                            case_.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {case_.status}
                          </span>
                          <span className="text-sm text-gray-500">{case_.date}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'knowledge' && (
            <div className="max-w-4xl">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Knowledge Base</h2>
                <div className="mb-6">
                  <div className="relative">
                    <Search className="w-5 h-5 absolute left-3 top-3 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search knowledge articles..."
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <div className="space-y-4">
                  {[
                    { title: 'How to process refunds', category: 'Billing', views: 234 },
                    { title: 'API troubleshooting guide', category: 'Technical', views: 189 },
                    { title: 'Account recovery procedures', category: 'Account', views: 156 }
                  ].map((article, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer">
                      <h3 className="font-medium text-gray-900">{article.title}</h3>
                      <div className="flex items-center space-x-4 mt-2">
                        <span className="text-sm text-gray-600">{article.category}</span>
                        <span className="text-sm text-gray-500">{article.views} views</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'tasks' && (
            <div className="max-w-4xl">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Tasks</h2>
                  <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    Add Task
                  </button>
                </div>
                <div className="space-y-4">
                  {[
                    { title: 'Follow up with Sarah Johnson', due: 'Today', priority: 'High', completed: false },
                    { title: 'Review billing discrepancy', due: 'Tomorrow', priority: 'Medium', completed: false },
                    { title: 'Update customer profile', due: 'This week', priority: 'Low', completed: true }
                  ].map((task, index) => (
                    <div key={index} className={`border border-gray-200 rounded-lg p-4 ${task.completed ? 'opacity-60' : ''}`}>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <button className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                            task.completed ? 'bg-green-500 border-green-500' : 'border-gray-300'
                          }`}>
                            {task.completed && <CheckCircle className="w-3 h-3 text-white" />}
                          </button>
                          <div>
                            <h3 className={`font-medium ${task.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                              {task.title}
                            </h3>
                            <p className="text-sm text-gray-600">{task.due}</p>
                          </div>
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          task.priority === 'High' ? 'bg-red-100 text-red-800' :
                          task.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {task.priority}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
