name: Cleanup Resources

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'artifacts'
        type: choice
        options:
          - artifacts
          - cache
          - staging-resources
          - all
      dry_run:
        description: 'Perform a dry run (no actual deletions)'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: 'us-east-1'

jobs:
  # Cleanup GitHub artifacts
  cleanup-artifacts:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'artifacts' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep artifacts for 30 days
            
            let deletedCount = 0;
            let totalSize = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              
              if (createdAt < cutoffDate) {
                totalSize += artifact.size_in_bytes;
                
                if (!dryRun) {
                  try {
                    await github.rest.actions.deleteArtifact({
                      owner,
                      repo,
                      artifact_id: artifact.id
                    });
                    console.log(`Deleted artifact: ${artifact.name} (${artifact.size_in_bytes} bytes)`);
                  } catch (error) {
                    console.error(`Failed to delete artifact ${artifact.name}:`, error);
                  }
                } else {
                  console.log(`Would delete artifact: ${artifact.name} (${artifact.size_in_bytes} bytes)`);
                }
                deletedCount++;
              }
            }
            
            const sizeInMB = Math.round(totalSize / 1024 / 1024);
            console.log(`${dryRun ? 'Would delete' : 'Deleted'} ${deletedCount} artifacts, freeing ${sizeInMB} MB`);

  # Cleanup GitHub Actions cache
  cleanup-cache:
    name: Cleanup Cache
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'cache' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Cleanup old cache entries
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            
            // Get all cache entries
            const caches = await github.rest.actions.getActionsCacheList({
              owner,
              repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 7); // Keep cache for 7 days
            
            let deletedCount = 0;
            let totalSize = 0;
            
            for (const cache of caches.data.actions_caches) {
              const lastAccessedAt = new Date(cache.last_accessed_at);
              
              if (lastAccessedAt < cutoffDate) {
                totalSize += cache.size_in_bytes;
                
                if (!dryRun) {
                  try {
                    await github.rest.actions.deleteActionsCacheById({
                      owner,
                      repo,
                      cache_id: cache.id
                    });
                    console.log(`Deleted cache: ${cache.key} (${cache.size_in_bytes} bytes)`);
                  } catch (error) {
                    console.error(`Failed to delete cache ${cache.key}:`, error);
                  }
                } else {
                  console.log(`Would delete cache: ${cache.key} (${cache.size_in_bytes} bytes)`);
                }
                deletedCount++;
              }
            }
            
            const sizeInMB = Math.round(totalSize / 1024 / 1024);
            console.log(`${dryRun ? 'Would delete' : 'Deleted'} ${deletedCount} cache entries, freeing ${sizeInMB} MB`);

  # Cleanup staging AWS resources
  cleanup-staging:
    name: Cleanup Staging Resources
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'staging-resources' || github.event.inputs.cleanup_type == 'all'
    environment: staging
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old S3 objects
        run: |
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          CUTOFF_DATE=$(date -d '30 days ago' '+%Y-%m-%d')
          
          # List S3 buckets for staging
          BUCKETS=$(aws s3api list-buckets --query 'Buckets[?contains(Name, `staging`)].Name' --output text)
          
          for BUCKET in $BUCKETS; do
            echo "Processing bucket: $BUCKET"
            
            # Get objects older than cutoff date
            OLD_OBJECTS=$(aws s3api list-objects-v2 \
              --bucket "$BUCKET" \
              --query "Contents[?LastModified<='$CUTOFF_DATE'].Key" \
              --output text)
            
            if [ ! -z "$OLD_OBJECTS" ]; then
              for OBJECT in $OLD_OBJECTS; do
                if [ "$DRY_RUN" = "true" ]; then
                  echo "Would delete: s3://$BUCKET/$OBJECT"
                else
                  aws s3 rm "s3://$BUCKET/$OBJECT"
                  echo "Deleted: s3://$BUCKET/$OBJECT"
                fi
              done
            fi
          done

      - name: Cleanup old Lambda versions
        run: |
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          # List Lambda functions with staging in name
          FUNCTIONS=$(aws lambda list-functions \
            --query 'Functions[?contains(FunctionName, `staging`)].FunctionName' \
            --output text)
          
          for FUNCTION in $FUNCTIONS; do
            echo "Processing function: $FUNCTION"
            
            # Get all versions except $LATEST
            VERSIONS=$(aws lambda list-versions-by-function \
              --function-name "$FUNCTION" \
              --query 'Versions[?Version!=`$LATEST`].Version' \
              --output text)
            
            # Keep only the latest 5 versions
            OLD_VERSIONS=$(echo "$VERSIONS" | tr ' ' '\n' | sort -n | head -n -5)
            
            for VERSION in $OLD_VERSIONS; do
              if [ "$DRY_RUN" = "true" ]; then
                echo "Would delete version $VERSION of function $FUNCTION"
              else
                aws lambda delete-function \
                  --function-name "$FUNCTION" \
                  --qualifier "$VERSION"
                echo "Deleted version $VERSION of function $FUNCTION"
              fi
            done
          done

      - name: Cleanup CloudWatch logs
        run: |
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          CUTOFF_DATE=$(date -d '90 days ago' '+%s')000  # Convert to milliseconds
          
          # List log groups with staging in name
          LOG_GROUPS=$(aws logs describe-log-groups \
            --query 'logGroups[?contains(logGroupName, `staging`)].logGroupName' \
            --output text)
          
          for LOG_GROUP in $LOG_GROUPS; do
            echo "Processing log group: $LOG_GROUP"
            
            # Get old log streams
            OLD_STREAMS=$(aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --query "logStreams[?lastEventTime<$CUTOFF_DATE].logStreamName" \
              --output text)
            
            for STREAM in $OLD_STREAMS; do
              if [ "$DRY_RUN" = "true" ]; then
                echo "Would delete log stream: $STREAM"
              else
                aws logs delete-log-stream \
                  --log-group-name "$LOG_GROUP" \
                  --log-stream-name "$STREAM"
                echo "Deleted log stream: $STREAM"
              fi
            done
          done

  # Generate cleanup report
  cleanup-report:
    name: Generate Cleanup Report
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-cache, cleanup-staging]
    if: always()
    steps:
      - name: Generate report
        run: |
          echo "# Cleanup Report - $(date)" > cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Summary" >> cleanup-report.md
          echo "- **Type**: ${{ github.event.inputs.cleanup_type || 'scheduled' }}" >> cleanup-report.md
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}" >> cleanup-report.md
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Job Results" >> cleanup-report.md
          echo "- **Artifacts Cleanup**: ${{ needs.cleanup-artifacts.result || 'skipped' }}" >> cleanup-report.md
          echo "- **Cache Cleanup**: ${{ needs.cleanup-cache.result || 'skipped' }}" >> cleanup-report.md
          echo "- **Staging Resources**: ${{ needs.cleanup-staging.result || 'skipped' }}" >> cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Next Steps" >> cleanup-report.md
          echo "- Review the workflow logs for detailed information" >> cleanup-report.md
          echo "- If this was a dry run, consider running with dry_run=false" >> cleanup-report.md
          echo "- Monitor AWS costs and usage after cleanup" >> cleanup-report.md

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: cleanup-report-${{ github.run_id }}
          path: cleanup-report.md
          retention-days: 30

  # Notify about cleanup
  notify-cleanup:
    name: Notify Cleanup Results
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-cache, cleanup-staging, cleanup-report]
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#ccp-maintenance',
              username: 'Cleanup Bot',
              icon_emoji: ':recycle:',
              attachments: [{
                color: '${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}',
                blocks: [{
                  type: 'section',
                  text: {
                    type: 'mrkdwn',
                    text: `🧹 *Weekly Cleanup Completed*\n\n*Results:*\n• Artifacts: ${{ needs.cleanup-artifacts.result || 'skipped' }}\n• Cache: ${{ needs.cleanup-cache.result || 'skipped' }}\n• Staging: ${{ needs.cleanup-staging.result || 'skipped' }}\n\n*Timestamp:* ${new Date().toISOString()}`
                  }
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}