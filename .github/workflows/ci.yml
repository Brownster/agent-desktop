name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  # Detect changes to determine which jobs to run
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      libs: ${{ steps.changes.outputs.libs }}
      apps: ${{ steps.changes.outputs.apps }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            libs:
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'tsconfig.base.json'
            apps:
              - 'apps/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            infrastructure:
              - 'infrastructure/**'
              - '.github/workflows/deploy-*.yml'
            docs:
              - 'docs/**'
              - '*.md'
              - 'apps/**/README.md'
              - 'libs/**/README.md'

  # Install dependencies and cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            libs/*/node_modules
            infrastructure/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            libs/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm nx run-many --target=lint --all --parallel=3

      - name: Check code formatting
        run: pnpm nx format:check

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            libs/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: pnpm nx run-many --target=type-check --all --parallel=3

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            libs/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm nx run-many --target=test --all --parallel=3 --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  # Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.apps == 'true'
    strategy:
      matrix:
        app: [ccp-admin, ccp-client, ccp-docs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            libs/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.app }}
        run: pnpm nx build ${{ matrix.app }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/dist
          retention-days: 30

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.libs == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Infrastructure validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.infrastructure == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install CDK dependencies
        working-directory: infrastructure/aws-cdk
        run: pnpm install

      - name: CDK Synth
        working-directory: infrastructure/aws-cdk
        run: pnpm run synth

      - name: CDK Diff (if applicable)
        working-directory: infrastructure/aws-cdk
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pnpm run diff || true
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # E2E tests (only on main branch)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.apps == 'true' || needs.changes.outputs.libs == 'true')
    strategy:
      matrix:
        app: [ccp-admin]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/dist

      - name: Install Playwright
        run: pnpm playwright install --with-deps

      - name: Run E2E tests
        run: pnpm nx e2e ${{ matrix.app }}-e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}-e2e/test-results/
            apps/${{ matrix.app }}-e2e/playwright-report/

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download ccp-admin build
        uses: actions/download-artifact@v3
        with:
          name: ccp-admin-build
          path: apps/ccp-admin/dist

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Create release (only on main branch)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate changelog and create release
          pnpm changeset version
          pnpm changeset publish
          
  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build, security]
    if: always()
    steps:
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ccp-alerts'
          text: 'CI/CD Pipeline failed for ${{ github.repository }} on ${{ github.ref_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on success
        if: success() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ccp-deployments'
          text: 'CI/CD Pipeline succeeded for ${{ github.repository }} on ${{ github.ref_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}